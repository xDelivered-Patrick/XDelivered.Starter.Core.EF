import { BaseClient } from "./client.extensions";

/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class Client extends BaseClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param requestModel (optional)
     * @return Success
     */
    apiAccountRegisterPost(requestModel?: RegisterRequestModel | null | undefined): Promise<OperationResult> {
        let url_ = this.baseUrl + "/api/account/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(requestModel);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAccountRegisterPost(_response);
        });
    }

    protected processApiAccountRegisterPost(response: Response): Promise<OperationResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResult.fromJS(resultData200) : new OperationResult();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResult>(<any>null);
    }

    /**
     * @param requestModel (optional)
     * @return Success
     */
    apiAccountLoginPost(requestModel?: LoginRequestModel | null | undefined): Promise<OperationResultOfLoginResponse> {
        let url_ = this.baseUrl + "/api/account/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(requestModel);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAccountLoginPost(_response);
        });
    }

    protected processApiAccountLoginPost(response: Response): Promise<OperationResultOfLoginResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResultOfLoginResponse.fromJS(resultData200) : new OperationResultOfLoginResponse();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResultOfLoginResponse>(<any>null);
    }

    /**
     * @return Success
     */
    apiAccountInfoGet(): Promise<OperationResultOfUserInfoResponseModel> {
        let url_ = this.baseUrl + "/api/account/info";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAccountInfoGet(_response);
        });
    }

    protected processApiAccountInfoGet(response: Response): Promise<OperationResultOfUserInfoResponseModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResultOfUserInfoResponseModel.fromJS(resultData200) : new OperationResultOfUserInfoResponseModel();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResultOfUserInfoResponseModel>(<any>null);
    }

    /**
     * @return Success
     */
    apiAdminUsersGet(): Promise<OperationResultOfListOfUserModel> {
        let url_ = this.baseUrl + "/api/admin/users";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAdminUsersGet(_response);
        });
    }

    protected processApiAdminUsersGet(response: Response): Promise<OperationResultOfListOfUserModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResultOfListOfUserModel.fromJS(resultData200) : new OperationResultOfListOfUserModel();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResultOfListOfUserModel>(<any>null);
    }

    /**
     * @return Success
     */
    apiAdminUserByIdGet(id: string): Promise<OperationResultOfUserModel> {
        let url_ = this.baseUrl + "/api/admin/user/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAdminUserByIdGet(_response);
        });
    }

    protected processApiAdminUserByIdGet(response: Response): Promise<OperationResultOfUserModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResultOfUserModel.fromJS(resultData200) : new OperationResultOfUserModel();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResultOfUserModel>(<any>null);
    }

    /**
     * @param model (optional)
     * @return Success
     */
    apiAdminUsersByIdPost(id: string, model?: UserModel | null | undefined): Promise<OperationResult> {
        let url_ = this.baseUrl + "/api/admin/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAdminUsersByIdPost(_response);
        });
    }

    protected processApiAdminUsersByIdPost(response: Response): Promise<OperationResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResult.fromJS(resultData200) : new OperationResult();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResult>(<any>null);
    }

    /**
     * @return Success
     */
    apiAdminUsersByIdDelete(id: string): Promise<OperationResult> {
        let url_ = this.baseUrl + "/api/admin/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAdminUsersByIdDelete(_response);
        });
    }

    protected processApiAdminUsersByIdDelete(response: Response): Promise<OperationResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResult.fromJS(resultData200) : new OperationResult();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResult>(<any>null);
    }

    /**
     * @param model (optional)
     * @return Success
     */
    apiAdminRestaurantByIdPost(id: number, model?: CreateRestaurantModel | null | undefined): Promise<OperationResult> {
        let url_ = this.baseUrl + "/api/admin/restaurant/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAdminRestaurantByIdPost(_response);
        });
    }

    protected processApiAdminRestaurantByIdPost(response: Response): Promise<OperationResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResult.fromJS(resultData200) : new OperationResult();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResult>(<any>null);
    }

    /**
     * @return Success
     */
    apiAdminRestaurantByIdDelete(id: number): Promise<OperationResult> {
        let url_ = this.baseUrl + "/api/admin/restaurant/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAdminRestaurantByIdDelete(_response);
        });
    }

    protected processApiAdminRestaurantByIdDelete(response: Response): Promise<OperationResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResult.fromJS(resultData200) : new OperationResult();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResult>(<any>null);
    }

    /**
     * @return Success
     */
    apiAdminReviewsGet(): Promise<OperationResultOfListOfReviewModel> {
        let url_ = this.baseUrl + "/api/admin/reviews";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAdminReviewsGet(_response);
        });
    }

    protected processApiAdminReviewsGet(response: Response): Promise<OperationResultOfListOfReviewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResultOfListOfReviewModel.fromJS(resultData200) : new OperationResultOfListOfReviewModel();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResultOfListOfReviewModel>(<any>null);
    }

    /**
     * @param model (optional)
     * @return Success
     */
    apiAdminReviewByIdPost(id: number, model?: ReviewModel | null | undefined): Promise<OperationResult> {
        let url_ = this.baseUrl + "/api/admin/review/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAdminReviewByIdPost(_response);
        });
    }

    protected processApiAdminReviewByIdPost(response: Response): Promise<OperationResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResult.fromJS(resultData200) : new OperationResult();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResult>(<any>null);
    }

    /**
     * @return Success
     */
    apiAdminReviewByIdDelete(id: number): Promise<OperationResult> {
        let url_ = this.baseUrl + "/api/admin/review/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAdminReviewByIdDelete(_response);
        });
    }

    protected processApiAdminReviewByIdDelete(response: Response): Promise<OperationResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResult.fromJS(resultData200) : new OperationResult();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResult>(<any>null);
    }

    /**
     * @return Success
     */
    apiAdminResponsesGet(): Promise<OperationResultOfListOfReviewRespondModel> {
        let url_ = this.baseUrl + "/api/admin/responses";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAdminResponsesGet(_response);
        });
    }

    protected processApiAdminResponsesGet(response: Response): Promise<OperationResultOfListOfReviewRespondModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResultOfListOfReviewRespondModel.fromJS(resultData200) : new OperationResultOfListOfReviewRespondModel();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResultOfListOfReviewRespondModel>(<any>null);
    }

    /**
     * @param model (optional)
     * @return Success
     */
    apiAdminResponsesByIdPost(id: number, model?: ReviewRespondModel | null | undefined): Promise<OperationResult> {
        let url_ = this.baseUrl + "/api/admin/responses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAdminResponsesByIdPost(_response);
        });
    }

    protected processApiAdminResponsesByIdPost(response: Response): Promise<OperationResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResult.fromJS(resultData200) : new OperationResult();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResult>(<any>null);
    }

    /**
     * @return Success
     */
    apiAdminResponsesByIdDelete(id: number): Promise<OperationResult> {
        let url_ = this.baseUrl + "/api/admin/responses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiAdminResponsesByIdDelete(_response);
        });
    }

    protected processApiAdminResponsesByIdDelete(response: Response): Promise<OperationResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResult.fromJS(resultData200) : new OperationResult();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResult>(<any>null);
    }

    /**
     * @return Success
     */
    get(): Promise<void> {
        let url_ = this.baseUrl + "/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param filterRatingMin (optional)
     * @param filterRatingMax (optional)
     * @return Success
     */
    apiRestaurantAllGet(filterRatingMin?: number | null | undefined, filterRatingMax?: number | null | undefined): Promise<OperationResultOfListOfRestaurantModel> {
        let url_ = this.baseUrl + "/api/restaurant/all?";
        if (filterRatingMin !== undefined)
            url_ += "filterRatingMin=" + encodeURIComponent("" + filterRatingMin) + "&";
        if (filterRatingMax !== undefined)
            url_ += "filterRatingMax=" + encodeURIComponent("" + filterRatingMax) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiRestaurantAllGet(_response);
        });
    }

    protected processApiRestaurantAllGet(response: Response): Promise<OperationResultOfListOfRestaurantModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResultOfListOfRestaurantModel.fromJS(resultData200) : new OperationResultOfListOfRestaurantModel();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResultOfListOfRestaurantModel>(<any>null);
    }

    /**
     * @return Success
     */
    apiRestaurantByIdGet(id: number): Promise<OperationResultOfRestaurantModel> {
        let url_ = this.baseUrl + "/api/restaurant/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiRestaurantByIdGet(_response);
        });
    }

    protected processApiRestaurantByIdGet(response: Response): Promise<OperationResultOfRestaurantModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResultOfRestaurantModel.fromJS(resultData200) : new OperationResultOfRestaurantModel();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResultOfRestaurantModel>(<any>null);
    }

    /**
     * @param model (optional)
     * @return Success
     */
    apiRestaurantByIdReviewPost(id: number, model?: ReviewRequestModel | null | undefined): Promise<OperationResult> {
        let url_ = this.baseUrl + "/api/restaurant/{id}/review";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiRestaurantByIdReviewPost(_response);
        });
    }

    protected processApiRestaurantByIdReviewPost(response: Response): Promise<OperationResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResult.fromJS(resultData200) : new OperationResult();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResult>(<any>null);
    }

    /**
     * @return Success
     */
    apiRestaurantMyGet(): Promise<OperationResultOfListOfRestaurantModel> {
        let url_ = this.baseUrl + "/api/restaurant/my";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiRestaurantMyGet(_response);
        });
    }

    protected processApiRestaurantMyGet(response: Response): Promise<OperationResultOfListOfRestaurantModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResultOfListOfRestaurantModel.fromJS(resultData200) : new OperationResultOfListOfRestaurantModel();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResultOfListOfRestaurantModel>(<any>null);
    }

    /**
     * @param model (optional)
     * @return Success
     */
    apiRestaurantMyCreatePost(model?: CreateRestaurantModel | null | undefined): Promise<OperationResult> {
        let url_ = this.baseUrl + "/api/restaurant/my/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiRestaurantMyCreatePost(_response);
        });
    }

    protected processApiRestaurantMyCreatePost(response: Response): Promise<OperationResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResult.fromJS(resultData200) : new OperationResult();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResult>(<any>null);
    }

    /**
     * @param model (optional)
     * @return Success
     */
    apiRestaurantMyReviewByReviewIdRespondPost(reviewId: number, model?: ReviewRespondModel | null | undefined): Promise<OperationResult> {
        let url_ = this.baseUrl + "/api/restaurant/my/review/{reviewId}/respond";
        if (reviewId === undefined || reviewId === null)
            throw new Error("The parameter 'reviewId' must be defined.");
        url_ = url_.replace("{reviewId}", encodeURIComponent("" + reviewId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiRestaurantMyReviewByReviewIdRespondPost(_response);
        });
    }

    protected processApiRestaurantMyReviewByReviewIdRespondPost(response: Response): Promise<OperationResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResult.fromJS(resultData200) : new OperationResult();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResult>(<any>null);
    }

    /**
     * @return Success
     */
    apiRestaurantMyReviewPendingGet(): Promise<OperationResultOfListOfReviewModel> {
        let url_ = this.baseUrl + "/api/restaurant/my/review/pending";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiRestaurantMyReviewPendingGet(_response);
        });
    }

    protected processApiRestaurantMyReviewPendingGet(response: Response): Promise<OperationResultOfListOfReviewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OperationResultOfListOfReviewModel.fromJS(resultData200) : new OperationResultOfListOfReviewModel();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResultOfListOfReviewModel>(<any>null);
    }
}

export class RegisterRequestModel implements IRegisterRequestModel {
    name?: string | null;
    email?: string | null;
    password?: string | null;
    role?: RegisterRequestModelRole | null;

    constructor(data?: IRegisterRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.role = data["role"] !== undefined ? data["role"] : <any>null;
        }
    }

    static fromJS(data: any): RegisterRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["role"] = this.role !== undefined ? this.role : <any>null;
        return data;
    }
}

export interface IRegisterRequestModel {
    name?: string | null;
    email?: string | null;
    password?: string | null;
    role?: RegisterRequestModelRole | null;
}

export class OperationResult implements IOperationResult {
    message?: string | null;
    isSuccess?: boolean | null;

    constructor(data?: IOperationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.isSuccess = data["isSuccess"] !== undefined ? data["isSuccess"] : <any>null;
        }
    }

    static fromJS(data: any): OperationResult {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        return data;
    }
}

export interface IOperationResult {
    message?: string | null;
    isSuccess?: boolean | null;
}

export class LoginRequestModel implements ILoginRequestModel {
    email: string;
    password: string;

    constructor(data?: ILoginRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
        }
    }

    static fromJS(data: any): LoginRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data;
    }
}

export interface ILoginRequestModel {
    email: string;
    password: string;
}

export class OperationResultOfLoginResponse implements IOperationResultOfLoginResponse {
    data?: LoginResponse | null;
    message?: string | null;
    isSuccess?: boolean | null;

    constructor(data?: IOperationResultOfLoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.data = data["data"] ? LoginResponse.fromJS(data["data"]) : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.isSuccess = data["isSuccess"] !== undefined ? data["isSuccess"] : <any>null;
        }
    }

    static fromJS(data: any): OperationResultOfLoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResultOfLoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        return data;
    }
}

export interface IOperationResultOfLoginResponse {
    data?: LoginResponse | null;
    message?: string | null;
    isSuccess?: boolean | null;
}

export class LoginResponse implements ILoginResponse {
    expiration?: Date | null;
    token?: string | null;

    constructor(data?: ILoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.expiration = data["expiration"] ? new Date(data["expiration"].toString()) : <any>null;
            this.token = data["token"] !== undefined ? data["token"] : <any>null;
        }
    }

    static fromJS(data: any): LoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>null;
        data["token"] = this.token !== undefined ? this.token : <any>null;
        return data;
    }
}

export interface ILoginResponse {
    expiration?: Date | null;
    token?: string | null;
}

export class OperationResultOfUserInfoResponseModel implements IOperationResultOfUserInfoResponseModel {
    data?: UserInfoResponseModel | null;
    message?: string | null;
    isSuccess?: boolean | null;

    constructor(data?: IOperationResultOfUserInfoResponseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.data = data["data"] ? UserInfoResponseModel.fromJS(data["data"]) : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.isSuccess = data["isSuccess"] !== undefined ? data["isSuccess"] : <any>null;
        }
    }

    static fromJS(data: any): OperationResultOfUserInfoResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResultOfUserInfoResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        return data;
    }
}

export interface IOperationResultOfUserInfoResponseModel {
    data?: UserInfoResponseModel | null;
    message?: string | null;
    isSuccess?: boolean | null;
}

export class UserInfoResponseModel implements IUserInfoResponseModel {
    email?: string | null;
    created?: Date | null;
    role?: string | null;

    constructor(data?: IUserInfoResponseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>null;
            this.role = data["role"] !== undefined ? data["role"] : <any>null;
        }
    }

    static fromJS(data: any): UserInfoResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["created"] = this.created ? this.created.toISOString() : <any>null;
        data["role"] = this.role !== undefined ? this.role : <any>null;
        return data;
    }
}

export interface IUserInfoResponseModel {
    email?: string | null;
    created?: Date | null;
    role?: string | null;
}

export class OperationResultOfListOfUserModel implements IOperationResultOfListOfUserModel {
    data?: UserModel[] | null;
    message?: string | null;
    isSuccess?: boolean | null;

    constructor(data?: IOperationResultOfListOfUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(UserModel.fromJS(item));
            }
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.isSuccess = data["isSuccess"] !== undefined ? data["isSuccess"] : <any>null;
        }
    }

    static fromJS(data: any): OperationResultOfListOfUserModel {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResultOfListOfUserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        return data;
    }
}

export interface IOperationResultOfListOfUserModel {
    data?: UserModel[] | null;
    message?: string | null;
    isSuccess?: boolean | null;
}

export class UserModel implements IUserModel {
    id?: string | null;
    name?: string | null;
    email?: string | null;
    password?: string | null;
    role?: string | null;

    constructor(data?: IUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.role = data["role"] !== undefined ? data["role"] : <any>null;
        }
    }

    static fromJS(data: any): UserModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["role"] = this.role !== undefined ? this.role : <any>null;
        return data;
    }
}

export interface IUserModel {
    id?: string | null;
    name?: string | null;
    email?: string | null;
    password?: string | null;
    role?: string | null;
}

export class OperationResultOfUserModel implements IOperationResultOfUserModel {
    data?: UserModel | null;
    message?: string | null;
    isSuccess?: boolean | null;

    constructor(data?: IOperationResultOfUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.data = data["data"] ? UserModel.fromJS(data["data"]) : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.isSuccess = data["isSuccess"] !== undefined ? data["isSuccess"] : <any>null;
        }
    }

    static fromJS(data: any): OperationResultOfUserModel {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResultOfUserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        return data;
    }
}

export interface IOperationResultOfUserModel {
    data?: UserModel | null;
    message?: string | null;
    isSuccess?: boolean | null;
}

export class CreateRestaurantModel implements ICreateRestaurantModel {
    name?: string | null;

    constructor(data?: ICreateRestaurantModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
        }
    }

    static fromJS(data: any): CreateRestaurantModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRestaurantModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export interface ICreateRestaurantModel {
    name?: string | null;
}

export class OperationResultOfListOfReviewModel implements IOperationResultOfListOfReviewModel {
    data?: ReviewModel[] | null;
    message?: string | null;
    isSuccess?: boolean | null;

    constructor(data?: IOperationResultOfListOfReviewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ReviewModel.fromJS(item));
            }
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.isSuccess = data["isSuccess"] !== undefined ? data["isSuccess"] : <any>null;
        }
    }

    static fromJS(data: any): OperationResultOfListOfReviewModel {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResultOfListOfReviewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        return data;
    }
}

export interface IOperationResultOfListOfReviewModel {
    data?: ReviewModel[] | null;
    message?: string | null;
    isSuccess?: boolean | null;
}

export class ReviewModel implements IReviewModel {
    id?: number | null;
    reviewedBy?: string | null;
    rating?: number | null;
    dateVisited?: Date | null;
    comment?: string | null;
    restaurantName?: string | null;
    restaurantImage?: string | null;
    reply?: ReviewRespondModel | null;

    constructor(data?: IReviewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.reviewedBy = data["reviewedBy"] !== undefined ? data["reviewedBy"] : <any>null;
            this.rating = data["rating"] !== undefined ? data["rating"] : <any>null;
            this.dateVisited = data["dateVisited"] ? new Date(data["dateVisited"].toString()) : <any>null;
            this.comment = data["comment"] !== undefined ? data["comment"] : <any>null;
            this.restaurantName = data["restaurantName"] !== undefined ? data["restaurantName"] : <any>null;
            this.restaurantImage = data["restaurantImage"] !== undefined ? data["restaurantImage"] : <any>null;
            this.reply = data["reply"] ? ReviewRespondModel.fromJS(data["reply"]) : <any>null;
        }
    }

    static fromJS(data: any): ReviewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["reviewedBy"] = this.reviewedBy !== undefined ? this.reviewedBy : <any>null;
        data["rating"] = this.rating !== undefined ? this.rating : <any>null;
        data["dateVisited"] = this.dateVisited ? this.dateVisited.toISOString() : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["restaurantName"] = this.restaurantName !== undefined ? this.restaurantName : <any>null;
        data["restaurantImage"] = this.restaurantImage !== undefined ? this.restaurantImage : <any>null;
        data["reply"] = this.reply ? this.reply.toJSON() : <any>null;
        return data;
    }
}

export interface IReviewModel {
    id?: number | null;
    reviewedBy?: string | null;
    rating?: number | null;
    dateVisited?: Date | null;
    comment?: string | null;
    restaurantName?: string | null;
    restaurantImage?: string | null;
    reply?: ReviewRespondModel | null;
}

export class ReviewRespondModel implements IReviewRespondModel {
    responseComment?: string | null;
    repliedBy?: string | null;
    id?: number | null;

    constructor(data?: IReviewRespondModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.responseComment = data["responseComment"] !== undefined ? data["responseComment"] : <any>null;
            this.repliedBy = data["repliedBy"] !== undefined ? data["repliedBy"] : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any): ReviewRespondModel {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewRespondModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["responseComment"] = this.responseComment !== undefined ? this.responseComment : <any>null;
        data["repliedBy"] = this.repliedBy !== undefined ? this.repliedBy : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data;
    }
}

export interface IReviewRespondModel {
    responseComment?: string | null;
    repliedBy?: string | null;
    id?: number | null;
}

export class OperationResultOfListOfReviewRespondModel implements IOperationResultOfListOfReviewRespondModel {
    data?: ReviewRespondModel[] | null;
    message?: string | null;
    isSuccess?: boolean | null;

    constructor(data?: IOperationResultOfListOfReviewRespondModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ReviewRespondModel.fromJS(item));
            }
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.isSuccess = data["isSuccess"] !== undefined ? data["isSuccess"] : <any>null;
        }
    }

    static fromJS(data: any): OperationResultOfListOfReviewRespondModel {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResultOfListOfReviewRespondModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        return data;
    }
}

export interface IOperationResultOfListOfReviewRespondModel {
    data?: ReviewRespondModel[] | null;
    message?: string | null;
    isSuccess?: boolean | null;
}

export class OperationResultOfListOfRestaurantModel implements IOperationResultOfListOfRestaurantModel {
    data?: RestaurantModel[] | null;
    message?: string | null;
    isSuccess?: boolean | null;

    constructor(data?: IOperationResultOfListOfRestaurantModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(RestaurantModel.fromJS(item));
            }
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.isSuccess = data["isSuccess"] !== undefined ? data["isSuccess"] : <any>null;
        }
    }

    static fromJS(data: any): OperationResultOfListOfRestaurantModel {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResultOfListOfRestaurantModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        return data;
    }
}

export interface IOperationResultOfListOfRestaurantModel {
    data?: RestaurantModel[] | null;
    message?: string | null;
    isSuccess?: boolean | null;
}

export class RestaurantModel implements IRestaurantModel {
    name?: string | null;
    image?: string | null;
    averageRating?: number | null;
    created?: Date | null;
    id?: number | null;
    canReview?: boolean | null;
    noReviews?: boolean | null;
    highestRatedReview?: ReviewModel | null;
    lowestRatedReview?: ReviewModel | null;
    mostRecentReviews?: ReviewModel[] | null;

    constructor(data?: IRestaurantModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.image = data["image"] !== undefined ? data["image"] : <any>null;
            this.averageRating = data["averageRating"] !== undefined ? data["averageRating"] : <any>null;
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.canReview = data["canReview"] !== undefined ? data["canReview"] : <any>null;
            this.noReviews = data["noReviews"] !== undefined ? data["noReviews"] : <any>null;
            this.highestRatedReview = data["highestRatedReview"] ? ReviewModel.fromJS(data["highestRatedReview"]) : <any>null;
            this.lowestRatedReview = data["lowestRatedReview"] ? ReviewModel.fromJS(data["lowestRatedReview"]) : <any>null;
            if (data["mostRecentReviews"] && data["mostRecentReviews"].constructor === Array) {
                this.mostRecentReviews = [];
                for (let item of data["mostRecentReviews"])
                    this.mostRecentReviews.push(ReviewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RestaurantModel {
        data = typeof data === 'object' ? data : {};
        let result = new RestaurantModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["image"] = this.image !== undefined ? this.image : <any>null;
        data["averageRating"] = this.averageRating !== undefined ? this.averageRating : <any>null;
        data["created"] = this.created ? this.created.toISOString() : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["canReview"] = this.canReview !== undefined ? this.canReview : <any>null;
        data["noReviews"] = this.noReviews !== undefined ? this.noReviews : <any>null;
        data["highestRatedReview"] = this.highestRatedReview ? this.highestRatedReview.toJSON() : <any>null;
        data["lowestRatedReview"] = this.lowestRatedReview ? this.lowestRatedReview.toJSON() : <any>null;
        if (this.mostRecentReviews && this.mostRecentReviews.constructor === Array) {
            data["mostRecentReviews"] = [];
            for (let item of this.mostRecentReviews)
                data["mostRecentReviews"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRestaurantModel {
    name?: string | null;
    image?: string | null;
    averageRating?: number | null;
    created?: Date | null;
    id?: number | null;
    canReview?: boolean | null;
    noReviews?: boolean | null;
    highestRatedReview?: ReviewModel | null;
    lowestRatedReview?: ReviewModel | null;
    mostRecentReviews?: ReviewModel[] | null;
}

export class OperationResultOfRestaurantModel implements IOperationResultOfRestaurantModel {
    data?: RestaurantModel | null;
    message?: string | null;
    isSuccess?: boolean | null;

    constructor(data?: IOperationResultOfRestaurantModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.data = data["data"] ? RestaurantModel.fromJS(data["data"]) : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.isSuccess = data["isSuccess"] !== undefined ? data["isSuccess"] : <any>null;
        }
    }

    static fromJS(data: any): OperationResultOfRestaurantModel {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResultOfRestaurantModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        return data;
    }
}

export interface IOperationResultOfRestaurantModel {
    data?: RestaurantModel | null;
    message?: string | null;
    isSuccess?: boolean | null;
}

export class ReviewRequestModel implements IReviewRequestModel {
    restaurantId?: number | null;
    comment?: string | null;
    rating?: number | null;
    visitTime?: Date | null;

    constructor(data?: IReviewRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.restaurantId = data["restaurantId"] !== undefined ? data["restaurantId"] : <any>null;
            this.comment = data["comment"] !== undefined ? data["comment"] : <any>null;
            this.rating = data["rating"] !== undefined ? data["rating"] : <any>null;
            this.visitTime = data["visitTime"] ? new Date(data["visitTime"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): ReviewRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["restaurantId"] = this.restaurantId !== undefined ? this.restaurantId : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["rating"] = this.rating !== undefined ? this.rating : <any>null;
        data["visitTime"] = this.visitTime ? this.visitTime.toISOString() : <any>null;
        return data;
    }
}

export interface IReviewRequestModel {
    restaurantId?: number | null;
    comment?: string | null;
    rating?: number | null;
    visitTime?: Date | null;
}

export enum RegisterRequestModelRole {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}
